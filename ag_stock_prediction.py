# -*- coding: utf-8 -*-
"""AG Stock Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fk_rsvdTLzKMmz1caY7Bd9S4eCejR7C4
"""

#matrix math & data pre-processing
import numpy as np

#for data formatting
import pandas as pd

#for plotting
import matplotlib.pyplot as plt
import seaborn as sns


#ML techniques
import sklearn
from sklearn.linear_model import Ridge
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.ensemble import GradientBoostingRegressor


import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Conv1D, LSTM, Dense
from keras.callbacks import LearningRateScheduler
from tensorflow.keras.losses import Huber
from keras.optimizers import SGD

sns.set()

from google.colab import drive
drive.mount('drive', force_remount=True)

from pandas_datareader import data as pdr
import fix_yahoo_finance as yf

yf.pdr_override()
dataframe = pdr.get_data_yahoo('AG', start="2018-01-01").reset_index()
dataframe.to_csv('AG.csv', index=False)
dataframe.head(10)

df_full = pd.read_csv('AG.csv')
df_full.set_index('Date', inplace=True)
df_full.head()

df_full['Adj Close'].plot(label='AG', figsize=(16,8), title='Adjusted Closing Price', grid=True)

# Create batchesf of 32 prices and predict the price of the 33rd day. 

window_size = 32 # Look into 32 days into the past
#Predict the data so that we have 32 day windows and predict what to do the next day
#Prepare the data so that we have 32 day windows and predict what the next day should be

num_samples = len(df_full)-window_size
indices = np.arange(num_samples).astype(np.int)[:,None] + np.arange(window_size+1).astype(np.int)

#Create the 2D matrix of training samples
data = df_full['Adj Close'].values[indices] 

X = data[:,:-1] #Each row represents 32 days in the past
y = data[:, -1] # Each output is he 33rd day to be inferenced

split_fraction = 0.8
index_train = int(split_fraction*num_samples)
X_train = X[:index_train]
y_train = y[:index_train]
X_test = X[index_train:]
y_test = y[index_train:]

#Train the variables using the ridge model
ridge_mod = Ridge()
ridge_mod.fit(X_train, y_train)

# Make price inference based on the trained model
y_pred_ridge_train = ridge_mod.predict(X_train)
y_pred_ridge_test = ridge_mod.predict(X_test)

# Plot the training data using the Ridge Model
df_ridge = df_full.copy()
df_ridge.drop(['Open','High', 'Low', 'Close', 'Volume'], axis=1, inplace=True)
df_ridge = df_ridge.iloc[window_size:index_train]
df_ridge['Adj Close Training Data'] = y_pred_ridge_train[:-window_size]
df_ridge.plot(label='AG', figsize=(16,8), title= 'Adjusted Closing Price', grid=True)

# Plot the testing data using the Ridge Model


df_ridge = df_full.copy()
df_ridge.drop(['Open', 'High', 'Low', 'Close', 'Volume'], axis=1, inplace=True)
df_ridge = df_ridge.iloc[index_train+window_size:]
df_ridge['Adj Close Test'] = y_pred_ridge_test
df_ridge.plot(label = 'AG', figsize=(16,8), title='Adjusted Closing Price', grid=True)

#Train the variables using the Linear Regression model

linreg_mod = LinearRegression()
linreg_mod.fit(X_train, y_train)

# Make price inference based on the trained model

y_pred_linreg_train = linreg_mod.predict(X_train)
y_pred_linreg_test = linreg_mod.predict(X_test)

#Plot the training data using the Linear Regression Model

df_linreg = df_full.copy()
df_linreg.drop(['Open','High', 'Low', 'Close', 'Volume'], axis=1, inplace=True)
df_linreg = df_linreg.iloc[window_size:index_train]
df_linreg['Adj Close Training Data'] = y_pred_linreg_train[:-window_size]
df_linreg.plot(label='AG', figsize=(16,8), title= 'Adjusted Closing Price', grid=True)

# Plot the testing data using the Linear Regression model

df_linreg = df_full.copy()
df_linreg.drop(['Open', 'High', 'Low', 'Close', 'Volume'], axis=1, inplace=True)
df_linreg = df_linreg.iloc[index_train+window_size:]
df_linreg['Adj Close Test'] = y_pred_linreg_test
df_linreg.plot(label = 'AG', figsize=(16,8), title='Adjusted Closing Price', grid=True)

#Train the variables using the Gradient Boosting Regressor model

gbr_mod = GradientBoostingRegressor()
gbr_mod.fit(X_train, y_train)

# Make price inference based on the trained model

y_pred_gbr_train = gbr_mod.predict(X_train)
y_pred_gbr_test = gbr_mod.predict(X_test)

# Plot the Training data using the Gradient Boosting Regressor model
df_gbr = df_full.copy()
df_gbr.drop(['Open', 'High', 'Low', 'Close', 'Volume'], axis=1, inplace=True)
df_gbr = df_gbr.iloc[window_size:index_train]
df_gbr['Adj Close Train'] = y_pred_gbr_train[:-window_size]
df_gbr.plot(label = 'AG', figsize=(16,8), title='Adjusted Closing Price', grid=True)

# Plot the Testing Data using the Gradient Boosting Regressor model
df_gbr = df_full.copy()
df_gbr.drop(['Open', 'High', 'Low', 'Close', 'Volume'], axis=1, inplace=True)
df_gbr = df_gbr.iloc[index_train+window_size:]
df_gbr['Adj Close Test'] = y_pred_gbr_test
df_gbr.plot(label = 'AG', figsize=(16,8), title='Adjusted Closing Price', grid=True)